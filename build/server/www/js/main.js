var config={},server={},iconSize=20,gridSize=38.5,session=void 0,locationUpdateRate=5,players={},allies=[],recent=[],locations={},$friends=$("#friends"),$allieslist=$("#allieslist"),$recentlist=$("#recentlist"),$buildings=$("#buildings"),$landmarks=$("#landmarks"),$grid=$("#grid");
function updateStatus(b){console.log("updating status ...");$.getJSON("/status.json",function(a){server=a;$("#hostname").text(server.hostname);$("#level").text(_(server.level)).prop("title",_("Worldsize {WORLDSIZE}, Seed {SEED}",{WORLDSIZE:server.worldsize,SEED:server.seed}));$("#numplayers").text(_("{NUM} / {MAX} players",{NUM:server.numplayers,MAX:server.maxplayers}));$("#numsleepers").text(_("{NUM} sleepers",{NUM:server.sleepers}));document.title=server.hostname;a.players&&(players={},$.each(a.players,
function(a,b){players[b.id]=b;session&&b.id==session.id||$("#player-"+b.id).prop("title",b.name)}));console.log("status updated");b&&b()}).fail(function(a,b){console.log("status update failed: "+b.message)})}
function updateMonuments(b){console.log("updating monuments ...");$.getJSON("/monuments.json",function(a){$.each(a,function(b,a){var d,f;/wolf_monument/.test(a.name)?(d="/img/wolf.png",f=_("Wolf Monument")):/lighthouse_monument/.test(a.name)?(d="/img/lighthouse.png",f=_("Lighthouse")):/dish_monument/.test(a.name)?(d="/img/dish.png",f=_("Satellite Dish")):/cave/.test(a.name)?(d="/img/cave.png",f=_("Cave")):/radtown/.test(a.name)&&(d="/img/radtown.png",f=_("Radtown"));d&&(elem=$('<img class="monument" src="'+
d+'" alt="" title="'+f+'" />'),d=worldToMap(a.position),elem.css({width:iconSize+"px",left:d.x-iconSize/2+"px",top:d.y-iconSize/2+"px"}),$landmarks.append(elem))});console.log("monuments updated");b&&b()}).fail(function(a,b){console.log("monuments update failed: "+b.message)})}
function updateBuildings(b){console.log("updating buildings ...");$.getJSON("/buildings.json",function(a){var c=document.getElementById("buildings"),e=c.getContext("2d");e.clearRect(0,0,c.width,c.height);var d=server.worldsize/1E3*.4;$.each(a,function(a,b){if("foundation"==b.name){var c=worldToMap(b.position);e.save();e.moveTo(c.x,c.y);e.translate(c.x,c.y);e.rotate(b.rotation/180*Math.PI);e.fillStyle="rgba(0,0,0,0.5)";e.fillRect(-d/2-.5,-d/2-.5,d+1,d+1);e.restore()}});$.each(a,function(b,a){if("foundation"==
a.name){var c=worldToMap(a.position);e.save();e.moveTo(c.x,c.y);e.translate(c.x,c.y);e.rotate(a.rotation/180*Math.PI);e.fillStyle="#ae8753";e.fillRect(-d/2,-d/2,d,d);e.restore()}});console.log("buildings updated");b&&b()}).fail(function(a,b){console.log("buildings update failed: "+b.message)})}
function updatePlayerLocation(b){var a=worldToMap(b),c=b.r;locations.hasOwnProperty(b.id)?(b=locations[b.id],b.pos=[b.pos[1],a],b.rot=[b.rot[1],c]):(console.log("creating player "+b.id),$landmarks.append(elem=$('<img class="player" alt="" id="player-'+b.id+'" />')),elem.prop("src","/img/"+(userId===b.id?"self":isShare(b.id)?"ally":"player")+".png"),elem.prop("title",userId===b.id?_("This is you!"):players[b.id]?players[b.id].name:b.id),elem.css({width:iconSize+"px",left:a.x-iconSize/2+"px",top:a.y-
iconSize/2+"px",transform:"rotate("+c+"deg)"}),b=locations[b.id]={},b.pos=[a,a],b.rot=[c,c],b.elem=elem);b.time=Date.now()}function findAlly(b){for(var a=0;a<allies.length;++a)if(allies[a].id==b)return allies[a];return null}function isFriend(b){if(!session)return!1;for(var a=0;a<session.friends.length;++a)if(session.friends[a].id==b)return!0;return!1}function isShare(b){if(!session)return!1;for(var a=0;a<session.shares.length;++a)if(session.shares[a].id==b)return!0;return!1}
function addFriend(b,a){findAlly(b);connect.socket&&!isFriend(b)&&b!=session.id&&confirm(_('Do you really want to SHARE your location with "{NAME}"?',{NAME:a}))&&(console.log("requesting add of friend "+b),connect.socket.send("friend.add "+JSON.stringify({id:b})))}
function deleteFriend(b,a){findAlly(b);connect.socket&&isFriend(b)&&confirm(_('Do you really want to NO LONGER SHARE your location with "{NAME}"?',{NAME:a}))&&(console.log("requesting delete of friend "+b),connect.socket.send("friend.del "+JSON.stringify({id:b})))}
function deleteForeignFriend(b,a){findAlly(b);connect.socket&&(isFriend(b)||isAlly(b))&&confirm(_('Do you really want to MUTUALLY DELETE your connection to "{NAME}"?',{NAME:a}))&&(console.log("requesting delete of foreign friend "+b),connect.socket.send("foreign.del "+JSON.stringify({id:b})))}
function updateAllies(){if(session){for(var b=[],a=0;a<allies.length;)isFriend(allies[a].id)||isShare(allies[a].id)?++a:(console.log("clearing ally: "+allies[a].id),$("#ally-"+allies[a].id).remove(),allies.splice(a,1));a=session.friends.slice();Array.prototype.push.apply(a,session.shares);$.each(a,function(a,e){if(!(0<=b.indexOf(e.id))){var d=findAlly(e.id);if(null==d){console.log("creating ally: "+e.id);d={};d.id=e.id;d.name=e.name;allies.push(d);d.elem=$('<a id="ally-'+d.id+'" class="player" />');
d.elem.text(d.name);d.elem.click(function(){isFriend(d.id)?deleteFriend(d.id,d.name):addFriend(d.id,d.name);return!1});d.elem.append($('<img class="icon" src="/img/revoke.png" />').click(function(a){deleteForeignFriend(d.id,d.name);a.stopPropagation();return!1}));var f=null;for(a in allies)if(allies.hasOwnProperty(a)&&allies[a].name.toLowerCase()>d.name.toLowerCase()){f=allies[a].elem;break}null!=f?d.elem.insertBefore(f):$allieslist.append(d.elem)}(d.isFriend=isFriend(e.id))?d.elem.addClass("friend"):
d.elem.removeClass("friend");(d.isShare=isShare(e.id))?d.elem.addClass("share"):d.elem.removeClass("share");(d.isMutual=d.isFriend&&d.isShare)?d.elem.addClass("mutual"):d.elem.removeClass("mutual");b.push(e.id)}})}}function findRecent(b){for(var a=0;a<recent.length;++a)if(recent[a].id==b)return recent[a];return null}
function addRecent(b,a){if(!session||session.id!=b){var c=findRecent(b);null==c&&(c={},c.id=b,c.name=a,recent.push(c));c.elem||(c.elem=$('<a id="recent-'+c.id+'" class="player "/>'),c.elem.text(c.name),c.elem.click(function(){addFriend(c.id,c.name);return!1}),$recentlist.append(c.elem));return c}}
function updateRecent(){console.log("updating recent players ...");$.getJSON("/recent.json",function(b){$.each(b,function(a,b){addRecent(b.id,b.name)});console.log("updated recent players")}).fail(function(b,a){console.log("recent players update failed: "+a.message)})}
setInterval(function(){var b=Date.now();$.each(locations,function(a,c){var e=(b-c.time)/1E3;1<e&&(e=1);e=lerp(c.pos[0],c.pos[1],e);c.elem.css({left:e.x-iconSize/2+"px",top:e.y-iconSize/2+"px",transform:"rotate("+c.rot[1]+"deg)"})})},1E3/locationUpdateRate);for(var labelsX="ABCDEFGHIJKLMNOPQRSTUVWXYZ".split(""),labelsY=[],i=1;26>=i;++i)labelsY.push(""+i);
function updateGrid(){var b=document.getElementById("grid"),a=b.getContext("2d");a.clearRect(0,0,b.width,b.height);a.save();a.beginPath();for(b=gridSize;1E3>b;b+=gridSize)a.moveTo(b-.5,.5),a.lineTo(b-.5,999.5),a.moveTo(.5,b-.5),a.lineTo(999.5,b-.5);a.strokeStyle="rgba(255,255,255,0.08)";a.stroke();a.fillStyle="rgba(255,255,255,0.5)";a.font="18px sans-serif";for(var c=b=0;1E3>b;b+=gridSize,c++){var e=labelsY[c],d=labelsX[c],f=a.measureText(e);a.fillText(e,1E3+(gridSize-f.width)/2,b+18+(gridSize-18)/
2-4);f=a.measureText(d);a.fillText(d,b+(gridSize-f.width)/2,1029)}a.restore()}
function connect(){if("undefined"==typeof WebSocket)alert(_("Sorry, your browser does not support WebSockets. Please consider upgrade to use RustWeb!"));else{console.log("connecting to websocket ...");var b=connect.socket=new WebSocket("ws://"+document.location.hostname+":"+document.location.port+"/ws");b.onopen=function(){console.log("connected to websocket")};b.onmessage=function(a){var c=a.data,e=c.indexOf(" ");0>e?(a=c,c=null):(a=c.substring(0,e),c=JSON.parse(c.substring(e+1)));switch(a){case "hello":console.log("greeted by server");
b.send("hello");break;case "session":console.log("received session info: "+c._id);session=c;userId=c.id;toggleCss("signedin",!0);notify(_("{YOU} just signed in",{YOU:"<strong>"+_("You")+"</strong>"}));updateAllies();updateRecent();break;case "friend.add":console.log("received added friend: "+c.id);session.friends.push(c);updateAllies();notify(_("{YOU} now share your location with {NAME}",{YOU:"<strong>"+_("You")+"</strong>",NAME:"<strong>"+escapeHtml(c.name)+"</strong>"}));break;case "friend.del":console.log("received deleted friend: "+
c.id);for(a=0;a<session.friends.length;++a)if(session.friends[a].id==c.id){session.friends.splice(a,1);updateAllies();notify(_("{YOU} no longer share your location with {NAME}",{YOU:"<strong>"+_("You")+"</strong>",NAME:"<strong>"+escapeHtml(c.name)+"</strong>"}));break}break;case "share.add":console.log("received added share: "+c.id);session.shares.push(c);updateAllies();notify(_("{NAME} now shares their location with you",{NAME:"<strong>"+escapeHtml(c.name)+"</strong>"}));(a=locations[c.id])&&a.elem.prop("src",
"/img/ally.png");break;case "share.del":console.log("received deleted share: "+c.id);for(a=0;a<session.shares.length;++a)if(session.shares[a].id==c.id){session.shares.splice(a,1);updateAllies();if(a=locations[c.id])a.elem.remove(),delete locations[c.id];notify(_("{NAME} no longer shares their location with you",{NAME:"<strong>"+escapeHtml(c.name)+"</strong>"}));break}break;case "l":updatePlayerLocation(c);break;case "player.connect":console.log("received player connect: "+c.id);notify(_("{NAME} just woke up",
{NAME:"<strong>"+escapeHtml(c.name)+"</strong>"}));a=addRecent(c.id,c.name);$recentlist.prepend(a.elem.detach());break;case "player.disconnect":console.log("received player disconnect: "+c.id);$("#player-"+c.id).remove();notify(_("{NAME} felt asleep",{NAME:"<strong>"+escapeHtml(c.name)+"</strong>"}));break;case "player.chat":console.log("received player spawn: "+c.id);notify(_("{NAME} says:",{NAME:"<strong>"+escapeHtml(c.name)+"</strong>"})+" "+escapeHtml(c.message));break;case "player.spawn":console.log("received player spawn: "+
c.id);notify(_("{NAME} spawned in the middle of nowhere",{NAME:"<strong>"+escapeHtml(c.name)+"</strong>"}));break;case "player.death":console.log("received player death: "+c.id);notify(damageToReason(c.lastDamage).replace("{NAME}","<strong>"+escapeHtml(c.name)+"</strong>"));break;default:console.log("received unknown command: "+a)}};b.onclose=function(a){console.log("disconnected from websocket (trying to reconnect in 20s)");setTimeout(function(){connect()},2E4);toggleCss("signedin",!1);delete connect.socket;
cleanup()};b.onerror=function(a){console.log("websocket error: "+a.error)}}}
function init(){console.log("loading config ...");$.getJSON("/config.json",function(b){config=b;toggleCss("displayMonuments",!!config.displayMonuments);toggleCss("displayBuildings",!!config.displayBuildings);console.log("config loaded");updateStatus(function(){setInterval(updateStatus,6E4);config&&config.displayMonuments&&updateMonuments();config&&config.displayBuildings&&(updateBuildings(),setInterval(updateBuildings,3E5));connect()})}).fail(function(b,a){console.log("loading config failed:",a)})}
$(document).ready(function(){console.log("initializing ...");toggleCss("signedin",!1);updateGrid();var b=$("#landmarks-checkbox");b.change(function(){$landmarks.css("display",b.is(":checked")?"block":"none")});var a=$("#buildings-checkbox");a.change(function(){$buildings.css("display",a.is(":checked")?"block":"none")});var c=$("#grid-checkbox");c.change(function(){$grid.css("display",c.is(":checked")?"block":"none")});$landmarks.bind("mousemove",function(a){a=mapToWorld({x:a.offsetX,y:a.offsetY});
$landmarks.prop("title",Math.round(a.x)+" / "+Math.round(a.z))});$("#allieslist, #recentlist").bind("mousewheel DOMMouseScroll",function(a){var b;"mousewheel"==a.type?b=-1*a.originalEvent.wheelDelta:"DOMMouseScroll"==a.type&&(b=40*a.originalEvent.detail);if(b)return a.stopPropagation(),a.preventDefault(),$(this).scrollTop(b+$(this).scrollTop()),!1});var e=$.cookie("lang");e&&"en"!=e?i18n.load(e,function(a){init()}):init();onResize()});
function cleanup(){$.each(allies,function(b,a){a.elem.remove()});$.each(recent,function(b,a){a.elem.remove()});$.each(locations,function(b,a){a.elem.remove()});session=null;allies=[];recent=[];locations={}}function onResize(){var b=($(window).height()-250)/2;$allieslist.css("max-height",b+"px");$recentlist.css("max-height",b+"px")}$(window).resize(onResize);
